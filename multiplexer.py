class Multiplexer(object):

    def __init__(self, sublayer):
        self.sublayer = sublayer

        self._tstate = 0

        self.data = None

    def update(self):
        if self.sublayer.begin:
            self._tstate = MSTATE_WAIT_FOR_TX

            return

        if self._tstate == MSTATE_CHECK_PHY_LINK:
            if self.sublayer.local_unidirectional and not self.sublayer.local_link_status:
                self._tstate = MSTATE_WAIT_FOR_TX
            elif not self.sublayer.local_unidirectional and self.sublayer.local_link_status:
                self._tstate = MSTATE_TX_FRAME

            return

        if self._tstate == MSTATE_TX_FRAME:
            # Generate MAC:MADR

            self._tstate = MSTATE_WAIT_FOR_TX

    def CTL_OAMI_request(self, dst_addr, src_addr, oam_service_data_unit, frame_check_sequence):
        """
        This primitive is generated by the Control function whenever an OAMPDU
        is to be conveyed to the peer OAM entity via the Multiplexer function.
        """

        self.data = oam_service_data_unit

    def LBF_OAMI_request(self, dst_addr, src_addr, oam_service_data_unit, frame_check_sequence):
        """
        This primitive is generated by the Control function whenever an OAMPDU
        is to be conveyed to the peer OAM entity via the Multiplexer function.
        """

        self.data = oam_service_data_unit

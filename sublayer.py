import socket
import time
from . import util
from .const import *


class OAMSublayer(object):

    def __init__(self, client, mode, iface, **kwargs):
        self.socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW)
        self.socket.bind((iface, 0))

        self.client = client

        # Variables
        self.begin = True
        self.local_oam_mode = mode
        self.local_pdu = 0
        self.local_stable = False

        # Counters
        self.pdu_cnt = 0

        # Timers
        self.local_lost_link_timer = 0
        self.pdu_timer = 0

        self.OAMCTL_request(**kwargs)

        self._dstate = 0
        self._tstate = 0

    def OAM_discovery(self):
        if self.begin or self.local_lost_link_timer + 5 <= time.time() or \
            (not self.local_link_status):
            self._dstate = DSTATE_FAULT

            if not self.local_link_status:
                self.local_pdu = LOCAL_PDU_LF_INFO
            else:
                self.local_pdu = LOCAL_PDU_RX_INFO

            self.local_stable = False

            self.client.OAMCTL_indication(self.local_pdu, False,
                self.local_lost_link_timer + 5 <= time.time())

            return

        if self._dstate == DSTATE_FAULT:
            if self.local_oam_mode == MODE_ACTIVE:
                self._dstate = DSTATE_ACTIVE_SEND_LOCAL
                self.local_pdu = LOCAL_PDU_INFO
            else:
                self._dstate = DSTATE_PASSIVE_WAIT
                self.local_pdu = LOCAL_PDU_RX_INFO

            self.client.OAMCTL_indication(self.local_pdu, False, False)

            return

        if (self._dstate in (DSTATE_ACTIVE_SEND_LOCAL, DSTATE_PASSIVE_WAIT) and self.remote_state_valid) or
            (self._dstate in (DSTATE_SEND_LOCAL_REMOTE_OK, DSTATE_SEND_ANY) and not self.local_satisfied):
            self._dstate = DSTATE_SEND_LOCAL_REMOTE

            self.local_pdu = LOCAL_PDU_INFO
            self.local_stable = False

            self.client.OAMCTL_indication(LOCAL_PDU_INFO, False, False)

            return

        if (self._dstate == DSTATE_SEND_LOCAL_REMOTE and self.local_satisfied) or
            (self._dstate == DSTATE_SEND_ANY and (self.local_satisfied and not self.remote_stable)):
            self._dstate = DSTATE_SEND_LOCAL_REMOTE_OK

            self.local_pdu = LOCAL_PDU_INFO
            self.local_stable = True

            self.client.OAMCTL_indication(LOCAL_PDU_INFO, True, False)

            return

        if self._dstate == DSTATE_SEND_LOCAL_REMOTE_OK and self.local_satisfied and
            self.remote_stable:
            self._dstate = DSTATE_SEND_ANY

            self.local_pdu = LOCAL_PDU_ANY

            self.client.OAMCTL_indication(LOCAL_PDU_ANY, True, False)

    def transmit(self):
        def enter_reset():
            self._tstate = TSTATE_RESET

            self.pdu_timer = time.time()
            self.pdu_cnt = 10
            
        if self.begin:
            enter_reset()

            return

        if self._tstate == TSTATE_RESET:
            self._tstate = TSTATE_WAIT_FOR_TX

            return

        if self._tstate == TSTATE_WAIT_FOR_TX:
            if self.pdu_timer + 1 <= time.time() and
                (self.local_pdu == LOCAL_PDU_RX_INFO or self.pdu_cnt != 10):
                enter_reset()
            elif self.pdu_timer + 1 <= time.time() and
                self.local_pdu != LOCAL_PDU_RX_INFO and self.pdu_cnt == 10:
                self._tstate = TSTATE_TX_OAMPDU
            elif self.pdu_timer + 1 > time.time() and (
                (self.local_pdu != LOCAL_PDU_RX_INFO and self.pdu_req == PDU_REQ_NORMAL and self.pdu_cnt != 0) or
                (self.local_pdu == LOCAL_PDU_ANY and self.pdu_req == PDU_REQ_CRITICAL)):
                self._tstate = TSTATE_DEC_PDU_CNT

            return

        if self._tstate == TSTATE_DEC_PDU_CNT:
            if self.pdu_req == PDU_REQ_NORMAL:
                self.pdu_cnt -= 1

            self._tstate = TSTATE_TX_OAMPDU

        if self._tstate == TSATET_TX_OAMPDU:
            self.OAMI_request() # ...

            if self.pdu_timer + 1 <= time.time():
                self._tstate = TSTATE_RESET
            else:
                self._tstate = TSTATE_WAIT_FOR_TX

    # Service Primitives
    def OAMPDU_request(self, flags, code, data, src_addr="00:00:00:00:00:00"):
        """
        Generated by the OAM client entity whenever an OAMPDU is to be
        transferrd to a peer entity.
        """

        if not self.pdu_
        if self.local_dying_gasp or not self.local_link_status or
            self.local_critical_event:
            self.pdu_req = PDU_REQ_CRITICAL
        else:
            self.pdu_req = PDU_REQ_NORMAL

        dst_mac = struct.pack("BBBBBB", 0x12, 0x80, 0xC2, 0x00, 0x00, 0x02)
        src_mac = util.mac2bytes(src_addr)

        ethertype = struct.pack(">H", 0x8809)
        subtype = struct.pack("B", 0x03)

        flags = struct.pack(">H", flags)
        code = struct.pack("B", code)

        self.socket.send(dst_mac + src_mac + ethertype + subtype + flags + \
            + code + data)

    def OAMCTL_request(self, **kwargs):
        """
        This primitive is passed from the OAM client entity to the OAM sublayer
        to update control information.
        """

        self.local_unidirectional = kwargs.get("local_unidirectional", False)
        self.local_link_status = kwargs.get("local_link_status", True)
        self.local_dying_gasp = kwargs.get("local_dying_gasp", False)
        self.local_critical_event = kwargs.get("local_critical_event", False)
        self.local_satisifed = kwargs.get("local_satisfied", False)
        self.remote_state_valid = kwargs.get("remote_state_valid", False)
        self.remote_stable = kwargs.get("remote_stable", False)
        self.local_mux_action = kwargs.get("local_mux_action", False)
        self.local_par_action = kwargs.get("local_par_action", 0)
        self.information_data = kwargs.get("information_data", 0)

    # Internal Service Primitives
    def OAMI_indication(self, dst_addr, src_addr, oam_service_data_unit,
                        frame_check_sequence, reception_status):
        """
        This primitive is generated whenever the Parser function intends to
        pass a received OAMPDU to the control function.
        """

        pass
